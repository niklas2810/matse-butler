# https://github.com/actions/starter-workflows/blob/main/ci/docker-publish.yml
name: Build Main Branch

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v**'
    paths:
      - 'src/**'
      - '**.xml'
      - '**.yml'

env:
  IMAGE_NAME: matse-butler

jobs:
  build:
    name: ⚙️ Build Project
    runs-on: ubuntu-latest

    steps:
      - name: ⏬ Checkout code
        uses: actions/checkout@v2
      - name: ⚙️ Set up JDK 14
        uses: actions/setup-java@v1
        with:
          java-version: 14

      - name: 💽 Restore Maven cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: build-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            build-${{ runner.os }}-

      - name: 📦 Build package
        run: mvn clean package

      - name: 🚀 Upload JAR
        uses: actions/upload-artifact@v2
        with:
          name: jar-files
          path: ./target/*.jar

      - name: 🚀 Upload test coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report.zip
          path: ./target/site/jacoco

  docker:
    needs: build
    name: 🐳 Generate Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: ⏬ Checkout code
        uses: actions/checkout@v2

      - name: ⏬ Download pre-built .jar
        uses: actions/download-artifact@v2
        with:
          name: jar-files
          path: ./jars

      - name: 💽 Restore Docker cache
        uses: actions/cache@v2
        with:
          path: /var/lib/docker/image
          key: docker-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            docker-${{ runner.os }}-

      - name: 📦 Build Docker image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: 🔑 Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ github.actor }} --password-stdin

      - name: ⬆️ Push image
        run: |
          IMAGE_ID=${{ github.repository }}
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  coverage:
    needs: build
    name: 🚀 Generate Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: ⏬ Checkout code
        uses: actions/checkout@v2
      - name: ⏬ Download Coverage Report
        uses: actions/download-artifact@v2
        with:
          name: coverage-report.zip
          path: ./coverage

      # TODO: Code Climate upload (when Java 14 is supported)

      - name: 🚀 Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: coverage
